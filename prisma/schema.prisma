// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id_patient       Int           @id @default(autoincrement())
  first_name       String
  second_name      String
  first_last_name  String
  second_last_name String
  sex              Sex
  birthdate        DateTime
  address          String
  email            String        @unique
  cellphone        String
  blood_type       String
  appointments     Appointment[]
}

model Doctor {
  id_doctor       Int           @id @default(autoincrement())
  names           String
  last_names      String
  office          String
  password        String
  id_specialty    Int
  specialty       Specialty     @relation(fields: [id_specialty], references: [id_specialty], onDelete: Cascade)
  appointments    Appointment[]
  from_references Reference[]   @relation("FromReferences")
  to_references   Reference[]   @relation("ToReferences")
}

model Specialty {
  id_specialty Int      @id @default(autoincrement())
  name         String
  doctors      Doctor[]
}

model Appointment {
  id_appointment Int      @id @default(autoincrement())
  id_patient     Int
  id_doctor      Int
  id_reference   Int?
  date           DateTime
  diagnosis      String?
  treatment      String?
  observations   String?
  finished       Boolean

  patient   Patient    @relation(fields: [id_patient], references: [id_patient], onDelete: Cascade)
  doctor    Doctor     @relation(fields: [id_doctor], references: [id_doctor], onDelete: Cascade)
  reference Reference? @relation(fields: [id_reference], references: [id_reference], onDelete: Cascade)
}

model Reference {
  id_reference   Int     @id @default(autoincrement())
  id_from_doctor Int
  id_to_doctor   Int
  comments       String?

  from_doctor Doctor        @relation("FromReferences", fields: [id_from_doctor], references: [id_doctor], onDelete: Cascade)
  to_doctor   Doctor        @relation("ToReferences", fields: [id_to_doctor], references: [id_doctor], onDelete: Cascade)
  Appointment Appointment[]
}

enum Sex {
  F
  M
}
